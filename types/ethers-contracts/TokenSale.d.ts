/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenSaleInterface extends ethers.utils.Interface {
  functions: {
    "EXCHANGE_RATIO()": FunctionFragment;
    "LMT()": FunctionFragment;
    "LYM()": FunctionFragment;
    "SALE_DURATION()": FunctionFragment;
    "lymCollected()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startDate()": FunctionFragment;
    "tokensSold()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wallet1Receiver()": FunctionFragment;
    "wallet2Receiver()": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "withdrawUnsoldTokens()": FunctionFragment;
    "withdrawLostTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EXCHANGE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LMT", values?: undefined): string;
  encodeFunctionData(functionFragment: "LYM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SALE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lymCollected",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wallet1Receiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wallet2Receiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdrawUnsoldTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLostTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXCHANGE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LMT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LYM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SALE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lymCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wallet1Receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wallet2Receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnsoldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLostTokens",
    data: BytesLike
  ): Result;

  events: {
    "Bought(address,uint256,uint256)": EventFragment;
    "Claimed(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class TokenSale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenSaleInterface;

  functions: {
    EXCHANGE_RATIO(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "EXCHANGE_RATIO()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    LMT(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "LMT()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    LYM(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "LYM()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    SALE_DURATION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "SALE_DURATION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lymCollected(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lymCollected()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    startDate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "startDate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokensSold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokensSold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    wallet1Receiver(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "wallet1Receiver()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    wallet2Receiver(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "wallet2Receiver()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    buy(
      _lymAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buy(uint256)"(
      _lymAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawUnsoldTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawUnsoldTokens()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawLostTokens(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawLostTokens(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  EXCHANGE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  "EXCHANGE_RATIO()"(overrides?: CallOverrides): Promise<BigNumber>;

  LMT(overrides?: CallOverrides): Promise<string>;

  "LMT()"(overrides?: CallOverrides): Promise<string>;

  LYM(overrides?: CallOverrides): Promise<string>;

  "LYM()"(overrides?: CallOverrides): Promise<string>;

  SALE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "SALE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  lymCollected(overrides?: CallOverrides): Promise<BigNumber>;

  "lymCollected()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokensSold(overrides?: CallOverrides): Promise<BigNumber>;

  "tokensSold()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  wallet1Receiver(overrides?: CallOverrides): Promise<string>;

  "wallet1Receiver()"(overrides?: CallOverrides): Promise<string>;

  wallet2Receiver(overrides?: CallOverrides): Promise<string>;

  "wallet2Receiver()"(overrides?: CallOverrides): Promise<string>;

  buy(
    _lymAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buy(uint256)"(
    _lymAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawUnsoldTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawUnsoldTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawLostTokens(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawLostTokens(address)"(
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    EXCHANGE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    "EXCHANGE_RATIO()"(overrides?: CallOverrides): Promise<BigNumber>;

    LMT(overrides?: CallOverrides): Promise<string>;

    "LMT()"(overrides?: CallOverrides): Promise<string>;

    LYM(overrides?: CallOverrides): Promise<string>;

    "LYM()"(overrides?: CallOverrides): Promise<string>;

    SALE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "SALE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    lymCollected(overrides?: CallOverrides): Promise<BigNumber>;

    "lymCollected()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    "tokensSold()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wallet1Receiver(overrides?: CallOverrides): Promise<string>;

    "wallet1Receiver()"(overrides?: CallOverrides): Promise<string>;

    wallet2Receiver(overrides?: CallOverrides): Promise<string>;

    "wallet2Receiver()"(overrides?: CallOverrides): Promise<string>;

    buy(_lymAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "buy(uint256)"(
      _lymAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUnsoldTokens(overrides?: CallOverrides): Promise<void>;

    "withdrawUnsoldTokens()"(overrides?: CallOverrides): Promise<void>;

    withdrawLostTokens(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLostTokens(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Bought(
      user: string | null,
      lymAmount: BigNumberish | null,
      lmtAmount: null
    ): EventFilter;

    Claimed(user: string | null, lmtAmount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    EXCHANGE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    "EXCHANGE_RATIO()"(overrides?: CallOverrides): Promise<BigNumber>;

    LMT(overrides?: CallOverrides): Promise<BigNumber>;

    "LMT()"(overrides?: CallOverrides): Promise<BigNumber>;

    LYM(overrides?: CallOverrides): Promise<BigNumber>;

    "LYM()"(overrides?: CallOverrides): Promise<BigNumber>;

    SALE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "SALE_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    lymCollected(overrides?: CallOverrides): Promise<BigNumber>;

    "lymCollected()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    "tokensSold()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    wallet1Receiver(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet1Receiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    wallet2Receiver(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet2Receiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(_lymAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "buy(uint256)"(
      _lymAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawUnsoldTokens(overrides?: Overrides): Promise<BigNumber>;

    "withdrawUnsoldTokens()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawLostTokens(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawLostTokens(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXCHANGE_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EXCHANGE_RATIO()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LMT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LMT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LYM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LYM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SALE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SALE_DURATION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lymCollected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lymCollected()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokensSold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    wallet1Receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet1Receiver()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wallet2Receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet2Receiver()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      _lymAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buy(uint256)"(
      _lymAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawUnsoldTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawUnsoldTokens()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawLostTokens(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawLostTokens(address)"(
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
