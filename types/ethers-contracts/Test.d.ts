/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "doTmth()": FunctionFragment;
    "doTmthWithGOAT()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "doTmth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doTmthWithGOAT",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doTmth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doTmthWithGOAT",
    data: BytesLike
  ): Result;

  events: {};
}

export class Test extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestInterface;

  functions: {
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    doTmth(overrides?: Overrides): Promise<ContractTransaction>;

    "doTmth()"(overrides?: Overrides): Promise<ContractTransaction>;

    doTmthWithGOAT(overrides?: Overrides): Promise<ContractTransaction>;

    "doTmthWithGOAT()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  doTmth(overrides?: Overrides): Promise<ContractTransaction>;

  "doTmth()"(overrides?: Overrides): Promise<ContractTransaction>;

  doTmthWithGOAT(overrides?: Overrides): Promise<ContractTransaction>;

  "doTmthWithGOAT()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    doTmth(overrides?: CallOverrides): Promise<void>;

    "doTmth()"(overrides?: CallOverrides): Promise<void>;

    doTmthWithGOAT(overrides?: CallOverrides): Promise<void>;

    "doTmthWithGOAT()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    doTmth(overrides?: Overrides): Promise<BigNumber>;

    "doTmth()"(overrides?: Overrides): Promise<BigNumber>;

    doTmthWithGOAT(overrides?: Overrides): Promise<BigNumber>;

    "doTmthWithGOAT()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doTmth(overrides?: Overrides): Promise<PopulatedTransaction>;

    "doTmth()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    doTmthWithGOAT(overrides?: Overrides): Promise<PopulatedTransaction>;

    "doTmthWithGOAT()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
