/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { NftDistributor } from "./NftDistributor";

export class NftDistributorFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<NftDistributor> {
    return super.deploy(overrides || {}) as Promise<NftDistributor>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NftDistributor {
    return super.attach(address) as NftDistributor;
  }
  connect(signer: Signer): NftDistributorFactory {
    return super.connect(signer) as NftDistributorFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NftDistributor {
    return new Contract(address, _abi, signerOrProvider) as NftDistributor;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC1155",
        name: "nft",
        type: "address"
      },
      {
        internalType: "address[]",
        name: "to",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    name: "distribute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610321806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fa74692e14610030575b600080fd5b6101eb6004803603608081101561004657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561007157600080fd5b82018360208201111561008357600080fd5b803590602001918460208302840111640100000000831117156100a557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156100f557600080fd5b82018360208201111561010757600080fd5b8035906020019184602083028401116401000000008311171561012957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561017957600080fd5b82018360208201111561018b57600080fd5b803590602001918460208302840111640100000000831117156101ad57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506101ed945050505050565b005b60005b83518110156102e457846001600160a01b031663f242432a3386848151811061021557fe5b602002602001015186858151811061022957fe5b602002602001015186868151811061023d57fe5b60200260200101516040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001838152602001828152602001806020018281038252600281526020018061060f60f31b81525060200195505050505050600060405180830381600087803b1580156102c057600080fd5b505af11580156102d4573d6000803e3d6000fd5b5050600190920191506101f09050565b505050505056fea264697066735822122070f3331d56976f3be7211414081cbe54017f1488e2271c5bfd144ecdc7cbf8cd64736f6c634300060c0033";
