/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { Multisend } from "./Multisend";

export class MultisendFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Multisend> {
    return super.deploy(overrides || {}) as Promise<Multisend>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Multisend {
    return super.attach(address) as Multisend;
  }
  connect(signer: Signer): MultisendFactory {
    return super.connect(signer) as MultisendFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multisend {
    return new Contract(address, _abi, signerOrProvider) as Multisend;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address"
      },
      {
        internalType: "address[]",
        name: "to",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    name: "multisend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610216806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ad8733ca14610030575b600080fd5b6101026004803603606081101561004657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561007157600080fd5b82018360208201111561008357600080fd5b803590602001918460208302840111640100000000831117156100a557600080fd5b9193909290916020810190356401000000008111156100c357600080fd5b8201836020820111156100d557600080fd5b803590602001918460208302840111640100000000831117156100f757600080fd5b509092509050610104565b005b60005b838110156101d857856001600160a01b03166323b872dd3387878581811061012b57fe5b905060200201356001600160a01b031686868681811061014757fe5b905060200201356040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156101a457600080fd5b505af11580156101b8573d6000803e3d6000fd5b505050506040513d60208110156101ce57600080fd5b5050600101610107565b50505050505056fea264697066735822122054be283afeb55c8d936a5437884c82e663c607d454031b0bf6b76cf96daca08564736f6c634300060c0033";
