/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { Test } from "./Test";

export class TestFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Test {
    return super.attach(address) as Test;
  }
  connect(signer: Signer): TestFactory {
    return super.connect(signer) as TestFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "doTmth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "doTmthWithGOAT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610777806100326000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806388b37ba5146100465780638da5cb5b14610050578063f4a8e71b14610074575b600080fd5b61004e61007c565b005b61005861042b565b604080516001600160a01b039092168252519081900360200190f35b61004e61043a565b6000546001600160a01b031633146100c7576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b6040805163b09ddf7b60e01b81526103e960048201526064602482018190526080604483015260006084830181905260c091830191909152600260c483015261060f60f31b60e4830152915173849178b18477d860a058e62b39dd7d4375e9470d92839263b09ddf7b92610104808301939282900301818387803b15801561014e57600080fd5b505af1158015610162573d6000803e3d6000fd5b50506040805163b09ddf7b60e01b81526101f56004820152603260248201526080604482015260006084820181905260c06064830152600260c483015261060f60f31b60e483015291516001600160a01b038616945063b09ddf7b9350610104808301939282900301818387803b1580156101dc57600080fd5b505af11580156101f0573d6000803e3d6000fd5b50506040805163b09ddf7b60e01b815260656004820152600a60248201526080604482015260006084820181905260c06064830152600260c483015261060f60f31b60e483015291516001600160a01b038616945063b09ddf7b9350610104808301939282900301818387803b15801561026957600080fd5b505af115801561027d573d6000803e3d6000fd5b50506040805163b09ddf7b60e01b8152601a6004820152600560248201526080604482015260006084820181905260c06064830152600260c483015261060f60f31b60e483015291516001600160a01b038616945063b09ddf7b9350610104808301939282900301818387803b1580156102f657600080fd5b505af115801561030a573d6000803e3d6000fd5b50506040805163b09ddf7b60e01b815260066004820152600360248201526080604482015260006084820181905260c06064830152600260c483015261060f60f31b60e483015291516001600160a01b038616945063b09ddf7b9350610104808301939282900301818387803b15801561038357600080fd5b505af1158015610397573d6000803e3d6000fd5b50506040805163b09ddf7b60e01b815260016004820181905260248201526080604482015260006084820181905260c06064830152600260c483015261060f60f31b60e483015291516001600160a01b038616945063b09ddf7b9350610104808301939282900301818387803b15801561041057600080fd5b505af1158015610424573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031681565b6000546001600160a01b03163314610485576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b6040805163b09ddf7b60e01b81526103e960048201526064602482018190526080604483015260006084830181905260c091830191909152600260c483015261060f60f31b60e4830152915173849178b18477d860a058e62b39dd7d4375e9470d92839263b09ddf7b92610104808301939282900301818387803b15801561050c57600080fd5b505af1158015610520573d6000803e3d6000fd5b50506040805163b09ddf7b60e01b81526101f56004820152603260248201526080604482015260006084820181905260c06064830152600260c483015261060f60f31b60e483015291516001600160a01b038616945063b09ddf7b9350610104808301939282900301818387803b15801561059a57600080fd5b505af11580156105ae573d6000803e3d6000fd5b50506040805163b09ddf7b60e01b815260656004820152600a60248201526080604482015260006084820181905260c06064830152600260c483015261060f60f31b60e483015291516001600160a01b038616945063b09ddf7b9350610104808301939282900301818387803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b50506040805163b09ddf7b60e01b8152601a6004820152600560248201526080604482015260006084820181905260c06064830152600260c483015261060f60f31b60e483015291516001600160a01b038616945063b09ddf7b9350610104808301939282900301818387803b1580156106b457600080fd5b505af11580156106c8573d6000803e3d6000fd5b50506040805163b09ddf7b60e01b815260066004820152600360248201526080604482015260006084820181905260c06064830152600260c483015261060f60f31b60e483015291516001600160a01b038616945063b09ddf7b9350610104808301939282900301818387803b15801561041057600080fdfea26469706673582212205ea4ac3bc403e4120085d4878e5d7798df9fa94c8c46ae3cf92f2748369635fe64736f6c634300060c0033";
