/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NftStakingUtilsInterface extends ethers.utils.Interface {
  functions: {
    "getBlockNumber()": FunctionFragment;
    "goatCards(uint256)": FunctionFragment;
    "higherTierCards(uint256)": FunctionFragment;
    "impl()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "lowerTierCards(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setImplementation(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setGoatCards(uint256[],uint256[])": FunctionFragment;
    "setHigherTierCards(uint256[],uint256[])": FunctionFragment;
    "setLowerTierCards(uint256[],uint256[])": FunctionFragment;
    "getCardPrices(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "goatCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "higherTierCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "impl", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lowerTierCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGoatCards",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setHigherTierCards",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLowerTierCards",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCardPrices",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goatCards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "higherTierCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "impl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lowerTierCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGoatCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHigherTierCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLowerTierCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardPrices",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class NftStakingUtils extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NftStakingUtilsInterface;

  functions: {
    getBlockNumber(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    goatCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "goatCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    higherTierCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "higherTierCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    impl(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "impl()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns true if the caller is the current owner.
     */
    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lowerTierCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lowerTierCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setImplementation(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setImplementation(address)"(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGoatCards(
      _ids: BigNumberish[],
      _boosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGoatCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _boosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setHigherTierCards(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setHigherTierCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLowerTierCards(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLowerTierCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCardPrices(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      res: BigNumber[];
      0: BigNumber[];
    }>;

    "getCardPrices(uint256[])"(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      res: BigNumber[];
      0: BigNumber[];
    }>;
  };

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  goatCards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "goatCards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  higherTierCards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "higherTierCards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  impl(overrides?: CallOverrides): Promise<string>;

  "impl()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns true if the caller is the current owner.
   */
  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  lowerTierCards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lowerTierCards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setImplementation(
    _newImpl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setImplementation(address)"(
    _newImpl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGoatCards(
    _ids: BigNumberish[],
    _boosts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGoatCards(uint256[],uint256[])"(
    _ids: BigNumberish[],
    _boosts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setHigherTierCards(
    _ids: BigNumberish[],
    _prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setHigherTierCards(uint256[],uint256[])"(
    _ids: BigNumberish[],
    _prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLowerTierCards(
    _ids: BigNumberish[],
    _prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLowerTierCards(uint256[],uint256[])"(
    _ids: BigNumberish[],
    _prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCardPrices(
    _ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getCardPrices(uint256[])"(
    _ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    goatCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "goatCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    higherTierCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "higherTierCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impl(overrides?: CallOverrides): Promise<string>;

    "impl()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns true if the caller is the current owner.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    lowerTierCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lowerTierCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setImplementation(
      _newImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setImplementation(address)"(
      _newImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGoatCards(
      _ids: BigNumberish[],
      _boosts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setGoatCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _boosts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setHigherTierCards(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setHigherTierCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLowerTierCards(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setLowerTierCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCardPrices(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getCardPrices(uint256[])"(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    goatCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "goatCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    higherTierCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "higherTierCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impl(overrides?: CallOverrides): Promise<BigNumber>;

    "impl()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns true if the caller is the current owner.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    lowerTierCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lowerTierCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setImplementation(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setImplementation(address)"(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGoatCards(
      _ids: BigNumberish[],
      _boosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGoatCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _boosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setHigherTierCards(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setHigherTierCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLowerTierCards(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLowerTierCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCardPrices(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCardPrices(uint256[])"(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goatCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "goatCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    higherTierCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "higherTierCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    impl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "impl()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns true if the caller is the current owner.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lowerTierCards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lowerTierCards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setImplementation(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setImplementation(address)"(
      _newImpl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGoatCards(
      _ids: BigNumberish[],
      _boosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGoatCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _boosts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setHigherTierCards(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setHigherTierCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLowerTierCards(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLowerTierCards(uint256[],uint256[])"(
      _ids: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCardPrices(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCardPrices(uint256[])"(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
