/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SsicoInterface extends ethers.utils.Interface {
  functions: {
    "deposit_team(address,uint256)": FunctionFragment;
    "deposit_unlock(address,uint256)": FunctionFragment;
    "withdraw_tokens(address)": FunctionFragment;
    "receiveBNB(address,uint256)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getSender()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit_team",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit_unlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_tokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveBNB",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "getSender", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "deposit_team",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit_unlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receiveBNB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class Ssico extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SsicoInterface;

  functions: {
    deposit_team(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit_team(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    deposit_unlock(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit_unlock(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    withdraw_tokens(
      account: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "withdraw_tokens(address)"(
      account: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    receiveBNB(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "receiveBNB(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getAdmin(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAdmin()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getSender(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getSender()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  deposit_team(
    sender: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit_team(address,uint256)"(
    sender: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  deposit_unlock(
    sender: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit_unlock(address,uint256)"(
    sender: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  withdraw_tokens(
    account: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "withdraw_tokens(address)"(
    account: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  receiveBNB(
    sender: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "receiveBNB(address,uint256)"(
    sender: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  getSender(overrides?: CallOverrides): Promise<string>;

  "getSender()"(overrides?: CallOverrides): Promise<string>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    deposit_team(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit_team(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit_unlock(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit_unlock(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw_tokens(account: string, overrides?: CallOverrides): Promise<void>;

    "withdraw_tokens(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    receiveBNB(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "receiveBNB(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    getSender(overrides?: CallOverrides): Promise<string>;

    "getSender()"(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deposit_team(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit_team(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    deposit_unlock(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit_unlock(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    withdraw_tokens(
      account: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "withdraw_tokens(address)"(
      account: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    receiveBNB(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "receiveBNB(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSender(overrides?: CallOverrides): Promise<BigNumber>;

    "getSender()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit_team(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit_team(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    deposit_unlock(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit_unlock(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    withdraw_tokens(
      account: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "withdraw_tokens(address)"(
      account: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    receiveBNB(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "receiveBNB(address,uint256)"(
      sender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
