/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SalePoolUtilsInterface extends ethers.utils.Interface {
  functions: {
    "earnMultiplier()": FunctionFragment;
    "multiplier()": FunctionFragment;
    "getMinStake()": FunctionFragment;
    "getMaxStake()": FunctionFragment;
    "getProduction(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "earnMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProduction",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "earnMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiplier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProduction",
    data: BytesLike
  ): Result;

  events: {};
}

export class SalePoolUtils extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SalePoolUtilsInterface;

  functions: {
    earnMultiplier(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "earnMultiplier()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    multiplier(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "multiplier()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMinStake(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMinStake()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMaxStake(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMaxStake()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getProduction(
      _stacked: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getProduction(uint256)"(
      _stacked: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  earnMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "earnMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMinStake(overrides?: CallOverrides): Promise<BigNumber>;

  "getMinStake()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxStake(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaxStake()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProduction(
    _stacked: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getProduction(uint256)"(
    _stacked: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    earnMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "earnMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProduction(
      _stacked: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProduction(uint256)"(
      _stacked: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    earnMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "earnMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProduction(
      _stacked: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProduction(uint256)"(
      _stacked: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    earnMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "earnMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "multiplier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMinStake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMaxStake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProduction(
      _stacked: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProduction(uint256)"(
      _stacked: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
